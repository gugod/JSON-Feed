{
  "version": "https://jsonfeed.org/version/1",
  "user_comment": "This feed allows you to read the posts from this site in any feed reader that supports the JSON Feed format. To add this feed to your reader, copy the following URL — http://inessential.com/feed.json — and add it your reader.",
  "title": "inessential",
  "description": "Brent Simmons’s weblog.",
  "home_page_url": "http://inessential.com/",
  "feed_url": "http://inessential.com/feed.json",
  "author": {
    "name": "Brent Simmons",
    "url": "http://inessential.com/",
    "avatar": "https://ranchero.com/downloads/brent_avatar.png"
  },
  "items": [
    {
      "title": "Text-Editing Key Bindings and the Mac",
      "date_published": "2019-03-06T12:16:31-08:00",
      "id": "http://inessential.com/2019/03/06/text_editing_key_bindings_and_the_mac",
      "url": "http://inessential.com/2019/03/06/text_editing_key_bindings_and_the_mac",
      "content_html": "<p>The system I wrote about <a href=\"http://inessential.com/2019/03/05/implementing_single_key_shortcuts_in_net\">yesterday</a> for specifying key bindings in NetNewsWire is just a small version of the system built into the <a href=\"http://www.hcs.harvard.edu/~jrus/site/cocoa-text.html\">Cocoa Text System</a>.</p>\n\n<p>Most Mac users probably don’t know about this. I forget about it for years at a time. But you can actually customize text editing keyboard shortcuts globally by editing a plist.</p>\n\n<p>(Link via <a href=\"https://bitsplitting.org/\">Daniel Jalkut</a>, sent privately.)</p>\n"
    },
    {
      "title": "Implementing Single-Key Shortcuts in NetNewsWire",
      "date_published": "2019-03-05T21:09:22-08:00",
      "id": "http://inessential.com/2019/03/05/implementing_single_key_shortcuts_in_net",
      "url": "http://inessential.com/2019/03/05/implementing_single_key_shortcuts_in_net",
      "content_html": "<p>NetNewsWire supports using single-key shortcuts for some commands: the <code>k</code> key marks all as read, for instance. The space bar scrolls the current article, or goes to the next unread if there’s nothing more to scroll.</p>\n\n<p>There are a bunch of these, and they’re documented: see NetNewsWire Help menu &gt; Keyboard Shortcuts.</p>\n\n<p>These kinds of shortcuts are fairly rare in Mac apps, and rightly so — they’re best for apps where power users might need to process a bunch of stuff and move around quickly. That doesn’t describe every app (thank goodness!).</p>\n\n<p>Since this isn’t really a standard AppKit thing, you might wonder how I implemented this in NetNewsWire.</p>\n\n<h4 id=\"getting-keyboard-events\">Getting keyboard events</h4>\n\n<p>You have to override <code>keyDown(with event: NSEvent)</code> — so NetNewsWire has subclasses such as <a href=\"https://github.com/brentsimmons/NetNewsWire/blob/master/NetNewsWire/MainWindow/Sidebar/SidebarOutlineView.swift\">SidebarOutlineView</a> in order to get keyboard events.</p>\n\n<p>I <em>could</em>, if I wanted, just get the character from the event and do a <code>switch</code> statement with code like this:</p>\n\n<pre><code>case 'k':\n\tmarkAllAsRead()\n</code></pre>\n\n<p>This gets ugly pretty quickly, and, importantly, I plan to make keyboard shortcuts customizable (at some point), so I chose a different path.</p>\n\n<h4 id=\"property-list-files\">Property List Files</h4>\n\n<p>If they’re customizable, then the specifiers need to be stored in some data format. Property lists (plists) are a good choice, since they’re easy to read and edit in Xcode.</p>\n\n<p>Now, I’m not making them customizable yet, but I figured it would be smart to use the same format and implementation for the default sets of shortcuts.</p>\n\n<h4 id=\"inside-the-plists\">Inside the plists</h4>\n\n<p>There are a few plist files: one for global shortcuts, one for the sidebar, one for the timeline, etc. (I could have made just one file, but I didn’t. Doesn’t matter.)</p>\n\n<p>Each file contains an array of shortcuts; each shortcut has a <code>key</code> and an <code>action</code>. The key is the actual key, such as <code>k</code> or <code>'</code> — or a placeholder such as <code>[rightarrow]</code> where the actual key couldn’t be listed in the plist. (The app translates placeholders into their actual values.)</p>\n\n<p>A shortcut may also have one or more modifiers, and those are represented as booleans: <code>shiftModifier</code>, for instance. This way we can differentiate between the space key and shift-space.</p>\n\n<p>The <code>action</code> part is a string specifying which method to call for the given shortcut.</p>\n\n<p>Here’s an <a href=\"https://github.com/brentsimmons/NetNewsWire/blob/master/NetNewsWire/MainWindow/Keyboard/GlobalKeyboardShortcuts.plist\">example of one of those files</a>.</p>\n\n<h4 id=\"the-keydown-implementation\">The keyDown implementation</h4>\n\n<p><code>SidebarOutlineView </code> overrides <code>keydown</code>:</p>\n\n<pre><code>override func keyDown(with event: NSEvent) {\n\tif keyboardDelegate.keydown(event, in: self) {\n\t\treturn\n\t}\n\tsuper.keyDown(with: event)\n}\n</code></pre>\n\n<p>The <code>keyboardDelegate</code> gets the first shot at handling the key. If it doesn’t handle it, then normal processing continues.</p>\n\n<h4 id=\"sidebarkeyboarddelegate\">SidebarKeyboardDelegate</h4>\n\n<p>There are several keyboard delegates, but let’s look at <a href=\"https://github.com/brentsimmons/NetNewsWire/blob/master/NetNewsWire/MainWindow/Sidebar/Keyboard/SidebarKeyboardDelegate.swift\">SidebarKeyboardDelegate</a>, since these all work about the same.</p>\n\n<p>In <code>init</code> it reads its keyboard shortcut definitions from a plist in the app bundle and creates a <code>Set&lt;KeyboardShortcut&gt;</code>. A <a href=\"https://github.com/brentsimmons/RSCore/blob/master/RSCore/Keyboard.swift\">KeyboardShortcut</a> is a <code>KeyboardKey</code> (defined in same file) plus an action string.</p>\n\n<p>A <code>KeyboardKey</code> describes the key, including its integer value and any combination of modifiers (shift, option, command, control).</p>\n\n<p>In keyDown, <code>SidebarKeyboardDelegate</code> first gives <a href=\"https://github.com/brentsimmons/NetNewsWire/blob/master/NetNewsWire/MainWindow/Keyboard/MainWIndowKeyboardHandler.swift\">MainWindowKeyboardHandler</a> a chance to handle the key. <code>MainWindowKeyboardHandler</code> handles keys that are global across views.</p>\n\n<p>If <code>MainWindowKeyboardHandler</code> doesn’t handle it, then it looks for a <code>KeyboardShortcut</code> that matches the pressed key.</p>\n\n<pre><code>let key = KeyboardKey(with: event)\nguard let matchingShortcut = KeyboardShortcut.findMatchingShortcut(in: shortcuts, key: key) else {\n\treturn false\n}\n</code></pre>\n\n<p>If it finds a matching shortcut, then it makes the shortcut do the thing it’s supposed to do:</p>\n\n<pre><code>matchingShortcut.perform(with: view)\n</code></pre>\n\n<h4 id=\"performing-the-shortcut\">Performing the shortcut</h4>\n\n<p>Remember that a <code>KeyboardShortcut</code> has a <code>KeyboardKey</code> and an <code>actionString</code>. That string is pulled from the plist: it’s something like <code>nextUnread:</code> or <code>openInBrowser:</code>.</p>\n\n<p>We turn this into a selector using <code>NSSelectorFromString</code> and store it in a local variable <code>action</code>.</p>\n\n<p>(The Objective-C runtime has a particularly beautiful thing: messages are real things, and they exist separately from objects.)</p>\n\n<p>The <code>perform(with:)</code> method looks like this:</p>\n\n<pre><code>public func perform(with view: NSView) {\n\tlet action = NSSelectorFromString(actionString)\n\tNSApplication.shared.sendAction(action, to: nil, from: view)\n}\n</code></pre>\n\n<p>Here’s Apple’s documentation on <a href=\"https://developer.apple.com/documentation/appkit/nsapplication/1428509-sendaction\">NSApplication.shared.sendAction</a>.</p>\n\n<p>The short version of what it does: if <code>to</code> (the target) is nil, it starts with the first responder, then checks its nextResponder, then its nextResponder, and so on until it finds an object that <em>responds</em> to the specified selector (the action) — and then it asks that object to perform that method (or: it sends that message to the receiver). (It also checks the window’s delegate and some other things before giving up, when it gets that far.)</p>\n\n<p>This means, for instance, that I don’t have to implement <code>openInBrowser:</code> in <code>SidebarOutlineView</code>. It could be implemented in its view controller, in <code>MainWindowController</code>, etc., as long as there is an implementation in the responder chain.</p>\n\n<p>This way the implementation can be placed where it makes sense. I can even move <code>openInBrowser:</code> without needing to change the plist configuration.</p>\n\n<p>And — this is important — it means that there might be (and there are, in NetNewsWire) <em>multiple</em> implementations of <code>openInBrowser:</code>. The sidebar has one which opens the home page of the selected feed. The timeline has a different one which opens the URL for the selected article.</p>\n\n<p>The one that gets called is based on which one of these is the first responder, because that’s where the responder chain starts. (Which is another way of saying: the implementation that gets called is based on what thing has user focus.)</p>\n\n<p>Both of these <code>openInBrowser:</code> commands are represented by the same <code>KeyboardShortcut</code> from the global keyboard shortcuts plist.</p>\n\n<h4 id=\"not-magic\">Not Magic</h4>\n\n<p>It may seem like <code>NSApplication.shared.sendAction</code> is doing something reserved for Apple that you couldn’t do, or couldn’t do easily.</p>\n\n<p>But you could actually write this yourself. This simple version (which just checks <code>nextResponder</code>) has all the critical bits.</p>\n\n<pre><code>func sendAction(_ action: Selector, to target: Any?, from sender: Any?) -&gt; Bool {\n\tvar responder = NSApplication.shared.keyWindow?.firstResponder\n\twhile responder != nil {\n\t\tif responder?.responds(to: action) ?? false {\n\t\t\tresponder?.perform(action, with: sender)\n\t\t\treturn true\n\t\t}\n\t\tresponder = responder?.nextResponder\n\t}\n\treturn false\n}\n</code></pre>\n\n<p>Obviously we don’t have the source to <code>NSApplication.shared.sendAction</code> — but, at least in concept, that’s all it’s doing. (Minus the part where it checks some things after exhausting <code>nextResponder</code>.)</p>\n\n<h4 id=\"summary\">Summary</h4>\n\n<p>In a Mac app, how does the Edit menu‘s Copy command know what to do? It walks the responder chain: the first to claim that it responds to the <code>copy:</code> message then performs the <code>copy:</code> method.</p>\n\n<p>You don’t have just one <code>copy:</code> method somewhere that has to figure out the context (figure out what has focus) and then do the right thing. Instead, you may have multiple <code>copy:</code> methods.</p>\n\n<p>(This is much less of a thing on iOS. But when you go to use Marzipan with your iOS apps, there’s a good chance you’re going to need to know about this.)</p>\n\n<p>The Copy command (and others) use the same pattern I’m using here, in other words.</p>\n\n<p>It’s also worth thinking about how nibs and storyboards actually get loaded by your app. All the wired-up actions are, at some level, just strings — so the frameworks (UIKit and AppKit) use <code>NSSelectorFromString</code> to turn these strings into real messages.</p>\n\n<p>Having an idea of how all this works under-the-hood is useful knowledge: it means you understand your app better. It also means that when you’re faced with something like implementing a keyboard shortcuts system, you’ll have the right tools for the job.</p>\n\n<p>(Of course this isn’t the right tool for every job.)</p>\n\n<h4 id=\"ps-try-this\">PS Try this!</h4>\n\n<p>In Xcode, set a symbolic breakpoint for <code>NSSelectorFromString</code>. Make the Action a sound. Check the box next to “Automatically continue after evaluating actions” — this way it won’t actually stop.</p>\n\n<p>Now launch your app. Even if <em>you</em> don’t ever use this, your app sure does!</p>\n\n<p>And, for bonus points, also set a similar breakpoint for <code>NSClassFromString</code>. Give it a different sound.</p>\n"
    },
    {
      "title": "Xcoders Speaker Needed",
      "date_published": "2019-03-05T11:56:52-08:00",
      "id": "http://inessential.com/2019/03/05/xcoders_speaker_needed",
      "url": "http://inessential.com/2019/03/05/xcoders_speaker_needed",
      "content_html": "<p>I you can make it to the Seattle Xcoders meeting March 14, and you might be interested in speaking, please get in touch! <a href=\"https://xcoders.org/2019/03/05/speaker-needed-for.html\">More details on xcoders.org</a>.</p>\n"
    },
    {
      "title": "Cool Stuff from The IconFactory",
      "date_published": "2019-03-05T10:55:29-08:00",
      "id": "http://inessential.com/2019/03/05/cool_stuff_from_the_iconfactory",
      "url": "http://inessential.com/2019/03/05/cool_stuff_from_the_iconfactory",
      "content_html": "<p>Our good friends at The IconFactory are getting back to their roots by making free wallpapers and desktop icons — fun stuff, made for fun. Here’s <a href=\"https://www.patreon.com/iconfactory\">how you can help</a> support them with this.</p>\n"
    },
    {
      "title": "NetNewsWire Feedback Incoming",
      "date_published": "2019-02-28T13:49:49-08:00",
      "id": "http://inessential.com/2019/02/28/netnewswire_feedback_incoming",
      "url": "http://inessential.com/2019/02/28/netnewswire_feedback_incoming",
      "content_html": "<p>I’ve been getting more NetNewsWire feedback now that I’ve called it <a href=\"http://inessential.com/2019/02/25/netnewswire_5_0d16_actually_usable_now\">actually usable now</a>.</p>\n\n<p>Feedback is <em>always</em> an education. (See the <a href=\"https://github.com/brentsimmons/NetNewsWire/issues\">most recent issues</a> for some of it.)</p>\n\n<p>There are things I expect to see, and then do see. Things I expect to see, and then don’t see. And things I didn’t expect at all.</p>\n\n<p>It’s a great reminder that everybody’s different, and people want different things. They want to use the app the way they want to use it.</p>\n\n<p>The tricky part is deciding what to do, of course. When I was younger, and selling NetNewsWire, I was reluctant to add features and preferences — but I did it anyway. A lot. I wanted people to buy the app!</p>\n\n<p>But it did mean that NetNewsWire became, in at least one person‘s words, a kind of “Swiss Army knife” of RSS readers. This made it difficult to move forward with new features that I thought would be cool and useful.</p>\n\n<p>Now that I’m older, and I’m not trying to please everybody and make money, I’m even more reluctant. I want to keep the app as simple as possible — because I like simple apps, and because it means I have time to add other features that I’ve never done before, but that I always thought would be cool.</p>\n\n<p>But, at the same time, I really <em>do</em> want it to be used by as many people as possible. So there’s a tension there which I find interesting. My position on it is just to go slowly — which I can’t really help anyway — and think hard about each issue.</p>\n\n<h4 id=\"one-that-i-did-not-see-coming\">One That I Did Not See Coming</h4>\n\n<p>One of the unexpected things is <a href=\"https://github.com/brentsimmons/NetNewsWire/issues/568\">Add way to see how many total unread items there are within the app</a>.</p>\n\n<p>There <em>is</em> a way, of course. There are <em>two</em> ways, even: the unread count appears in the Dock icon and beside the All Unread smart feed.</p>\n\n<p>You’d think that would be enough — but it’s not. Consider that you might have the Dock hidden, and consider that you might have enough feeds and folders in the sidebar so that you can’t see the All Unread smart feed — it’s scrolled off.</p>\n\n<p>Then what?</p>\n\n<p>It could go in the toolbar — but some people run with the toolbar hidden. And, anyway, I never like status-y stuff in the toolbar. It could be a non-default toolbar thing — people could add it. But I’ve learned that lots of people don’t know you can customize toolbars.</p>\n\n<p>How about a status bar at the bottom of the sidebar that can’t scroll off? Older versions of NetNewsWire had this.</p>\n\n<p>Sure — but the trend these days, which I like very much, is to have a clean bottom edge to the window. No chrome. Look at Mail, Safari, Pages, and Numbers.</p>\n\n<p>Well, okay — do that, but make it a View menu option, off by default, so we keep the clean edge.</p>\n\n<p>Ugh. Now we’re going down the road of endless permutations of little things you can configure. That’s the road I want to avoid as much as possible. Do we really add that just because of the probably rare case where someone hides their Dock <em>and</em> the All Unread smart feed is scrolled off?</p>\n\n<p>Another idea: that bottom-of-the-sidebar status view could appear <em>only</em> when the All Unread feed is scrolled off. But I really hate non-stable UI with weird little changes like that. It always seems too clever, and it makes me think the designer thinks they can paper over a design flaw by showing off.</p>\n\n<p>Or there could be a non-scrolling indicator at the <em>top</em> of the sidebar. That ruins the nice line going along the top, though. But maybe the timeline needs a thing at the top for sorting, so maybe that line will go away anyway? And: wouldn’t this look weirdly redundant when the All Unread feed is <em>not</em> scrolled off?</p>\n\n<p>So… what to do? I’m not actually asking for suggestions — though I’ll get some, because people tend to read things like this as problems-to-solve. (And I don’t mind suggestions. Not at all.) But what I actually intend here is just a look behind the development process at the point where people start giving feedback on an app.</p>\n\n<p>Here’s what happens at this point: your design meets conditions you didn’t account for. They’re often rare cases, but they’re legitimate. And all the options seem pretty bad.</p>\n\n<p>What will probably happen, in this case, is that I’ll punt on figuring it out till after 5.0 ships. I have no idea what I’ll end up doing. Which is part of the fun. :)</p>\n"
    },
    {
      "date_published": "2019-02-27T12:09:59-08:00",
      "id": "http://inessential.com/2019/02/27/our_community_is_mourning_the_loss_trist",
      "url": "http://inessential.com/2019/02/27/our_community_is_mourning_the_loss_trist",
      "content_html": "<p>Our community is <a href=\"https://twitter.com/pbur/status/1100681415660756992\">mourning the loss of Tristan O’Tierney</a> today.</p>\n\n<p>I met him before the iPhone days, I’m pretty sure. While we were never close, I was always happy to see him at WWDC and similar events, and I liked him tremendously. I had somehow missed that he had been struggling. I wish so much that he had not been.</p>\n"
    },
    {
      "date_published": "2019-02-26T13:43:05-08:00",
      "id": "http://inessential.com/2019/02/26/_joshuablankenship_com_2019_02_22_let_sl",
      "url": "http://inessential.com/2019/02/26/_joshuablankenship_com_2019_02_22_let_sl",
      "content_html": "<p><a href=\"https://joshuablankenship.com/2019/02/22/let-sleeping-blogs-die-or-the-return-of-the-personal-website/\">Joshua Blankenship</a> misses 2004 and personal websites. (Via <a href=\"http://cdevroe.com/2019/02/26/joshua-blankenship-celebrates-15-years-of-having-a-blog/\">Colin Devroe</a>.)</p>\n"
    },
    {
      "title": "NetNewsWire 5.0d16: Actually Usable Now",
      "date_published": "2019-02-25T22:12:40-08:00",
      "id": "http://inessential.com/2019/02/25/netnewswire_5_0d16_actually_usable_now",
      "url": "http://inessential.com/2019/02/25/netnewswire_5_0d16_actually_usable_now",
      "content_html": "<p>The <a href=\"http://ranchero.com/netnewswire/\">latest build of NetNewsWire</a> adds searching, one of the last important things to do before shipping.</p>\n\n<p>It still doesn’t have syncing yet. There are a few bugs to fix. It doesn’t have a new app icon yet.</p>\n\n<p>But this is the first build where I’d call it usable. The core features of an RSS reader are there.</p>\n\n<p>If you were holding off, waiting for a usable build, then you can stop holding off.</p>\n\n<p>(But if you still want to hold off trying it until I add FeedBin syncing — or your preferred system — I totally understand.)</p>\n\n<p>Reminder: <a href=\"http://inessential.com/2018/12/05/so_basic_its_not_even_funny\">it’s so basic it’s not even funny</a>!</p>\n"
    },
    {
      "title": "The ODB Editor Suite: What I Remember",
      "date_published": "2019-02-25T15:15:23-08:00",
      "id": "http://inessential.com/2019/02/25/the_odb_editor_suite_what_i_remember",
      "url": "http://inessential.com/2019/02/25/the_odb_editor_suite_what_i_remember",
      "content_html": "<p>The ODB Editor suite — which came up on the latest <a href=\"https://daringfireball.net/thetalkshow/2019/02/22/ep-244\">The Talk Show podcast</a> — happens to be something I know about.</p>\n\n<p>Here’s what I remember about how it happened… (<a href=\"http://scripting.com/\">Dave Winer</a> or <a href=\"https://twitter.com/siegel\">Rich Siegel</a> may remember more, or better, and may correct me, and maybe not.)</p>\n\n<p>I was working at UserLand, or maybe still doing contracting, or maybe I was still just an enthusiastic member of the community. I forget. But I was nearby when this happened.</p>\n\n<p>Dave had written a website rendering framework for UserLand Frontier that generated static sites. This was the mid-to-late 1990s. The pages were stored in Frontier’s object database, which had its own text editor.</p>\n\n<p>The problem was that some people wanted to use <a href=\"https://www.barebones.com/products/bbedit/\">BBEdit</a> instead of Frontier’s built-in text editor, because, well BBEdit was (and still is) awesome.</p>\n\n<p>So we wanted to make it so you could be looking at text in Frontier, and then choose a menu command to open it in BBEdit for editing — and then <em>have it automatically update in Frontier’s object database when you close it in BBEdit.</em></p>\n\n<p>In other words, we wanted BBEdit to be an external editor for Frontier’s object database.</p>\n\n<p>So Dave — working with Rich? Doug Baron? Jim Correia? I honestly don’t know who all worked on the details, though it wasn’t me — came up with the ODB Editor suite, which any text editor could support. (The BBEdit site has <a href=\"https://www.barebones.com/support/develop/odbsuite.html\">documentation</a>.) BBEdit supported it, and other text editors added support too over the years.</p>\n\n<p>The ODB part stands for Object Database.</p>\n\n<p>Years later, for <a href=\"https://www.red-sweater.com/marsedit/\">MarsEdit</a> 1.0 (or some early version), I implemented the server side of the ODB Editor suite, so you could open something in MarsEdit in BBEdit, and have it save back to MarsEdit.</p>\n\n<p>PS I use MarsEdit to this day. MarsEdit and BBEdit still support the ODB Editor Suite. Just to try it out, I’m writing this post in BBEdit, and it automatically updates the text in MarsEdit. It still works. :)</p>\n"
    },
    {
      "date_published": "2019-02-25T14:32:29-08:00",
      "id": "http://inessential.com/2019/02/25/theres_a_measles_outbreak_in_washington_",
      "url": "http://inessential.com/2019/02/25/theres_a_measles_outbreak_in_washington_",
      "content_html": "<p>There’s a <a href=\"https://www.doh.wa.gov/YouandYourFamily/IllnessandDisease/Measles/MeaslesOutbreak\">measles outbreak in Washington State</a>, where I live.</p>\n\n<p>I try not to think about people not vaccinating their children. I <a href=\"http://inessential.com/2015/02/10/vaccines_again\">nearly died</a> as a result of having a <a href=\"http://inessential.com/2009/10/29/vaccines\">terrible case of chickenpox</a> during a blizzard. I live every day with damaged eyesight.</p>\n\n<p>There was no chickenpox vaccine in those days. I sure wish there had been.</p>\n"
    },
    {
      "date_published": "2019-02-21T16:26:26-08:00",
      "id": "http://inessential.com/2019/02/21/while_working_on_show_notes_for_an_upcom",
      "url": "http://inessential.com/2019/02/21/while_working_on_show_notes_for_an_upcom",
      "content_html": "<p>While working on show notes for an upcoming episode of The Omni Show, I found this classic blog post about <a href=\"https://cocoasamurai.blogspot.com/2010/12/objective-c-memory-management-garbage.html\">Objective-C Memory Management &amp; Garbage Collection</a>.</p>\n\n<p>I had completely forgotten about the <code>finalize</code> method.</p>\n"
    },
    {
      "date_published": "2019-02-20T11:04:52-08:00",
      "id": "http://inessential.com/2019/02/20/in_the_latest_episode_of_the_omni_show_h",
      "url": "http://inessential.com/2019/02/20/in_the_latest_episode_of_the_omni_show_h",
      "content_html": "<p>In the <a href=\"https://theomnishow.omnigroup.com/episode/brent-simmons-marketing-human/\">latest episode of The Omni Show</a>, <em>I</em> am the guest. How does this even work? Do I interview myself? What’s going on here?</p>\n\n<p>PS I like being on podcasts, and I’d be happy to be on yours, to talk about Omni stuff or my own stuff or both. I could probably even convince Ken Case to be a guest on your show if you want to talk about Omni apps and developing for Mac and iOS in 2019.</p>\n\n<p>(My email address is no secret, and every spammer everywhere already has it, so I’ll just post it here: it’s <a href=\"mailto:brent@ranchero.com\">brent@ranchero.com</a>.)</p>\n"
    },
    {
      "title": "NetNewsWire Status: February 19, 2019",
      "date_published": "2019-02-19T13:35:45-08:00",
      "id": "http://inessential.com/2019/02/19/netnewswire_status_february_19_2019",
      "url": "http://inessential.com/2019/02/19/netnewswire_status_february_19_2019",
      "content_html": "<p>There are three big things that <a href=\"https://github.com/brentsimmons/NetNewsWire/milestone/1\">remain</a> before the first feature-complete build (which will be 5.0a1): searching, the app icon, and syncing with FeedBin.</p>\n\n<p>Brad Ellis is working on the app icon, so that leaves searching and syncing (and a few miscellaneous bugs) for me.</p>\n\n<p>I’ve been working on searching — I want to get that done next, and then do syncing as the last thing before hitting alpha 1.</p>\n\n<h4 id=\"how-search-is-implemented\">How search is implemented</h4>\n\n<p>The UI for searching is pretty straightforward: you type into the search field, and then the timeline shows your search results. Click on an article to show it in the detail web view. Exactly as expected.</p>\n\n<p>But there are two ways I can think of to implement this UI.</p>\n\n<ol>\n  <li>When a search starts, do the search and show the results in the timeline. When the user ends searching, restore the previous timeline and detail view states.</li>\n  <li>When a search starts, swap in a separate timeline and detail view, do the search, and then show the results in these swapped-in views. When the user ends searching, swap those views out, and swap back in the regular timeline and detail views.</li>\n</ol>\n\n<p>Ideally the user can’t tell the difference between the two methods. But if you go with solution #1 — use the existing timeline and detail views — then you have the challenge of restoring state, including selection and scroll positions, when searching ends.</p>\n\n<p>If you use solution #2 — swapping views in and out — then you don’t have that challenge. State is restored exactly as it was, because you saved the non-search views and swapped them back in.</p>\n\n<p>(If you look at other apps — Mail, for example — it appears they use solution #1, and state restoration is not always instant. I want it to be instant.)</p>\n\n<p>So, for the past week, I’ve been re-jiggering so that I can have multiple timeline and detail views and swap them in and out.</p>\n\n<p>(This is not that different from how searching in iOS apps is supposed to work.)</p>\n\n<p>And then, last night, as I finished the re-jiggering, I did the actual search-in-the-database implementation, which took about an hour.</p>\n\n<p>This still leaves me to handle changes to the search field, so that the search is actually run at the right time, and so that searching ends properly. I expect that to take a few hours to get all right. (I’ve done this before, and it’s always slightly more complex than it seems.)</p>\n\n<h4 id=\"why-do-i-make-this-point\">Why do I make this point?</h4>\n\n<p>If you’re not a programmer — or you’re new to programming, or haven’t written apps with a user interface — it’s easy to think that the actual under-the-hood implementation of a feature is what takes the most time.</p>\n\n<p>It’s not. In the case of the search feature, I spent more time just <em>thinking</em> about how I want to do the UI than on the actual search-in-the-database implementation. And then there’s the UI work itself, which absolutely dwarfs the database work.</p>\n\n<p>Another case: you might imagine that the bulk of the work in NetNewsWire was writing an RSS parser, for instance. But no. While that code is critical, obviously, it’s very, very small compared to the user interface.</p>\n\n<p>And, similarly, the part of syncing that’s just making API calls and updating the database will be the easy part. The part that takes longest will be user interface. A factor of ten would not be surprising.</p>\n"
    },
    {
      "date_published": "2019-02-13T17:14:28-08:00",
      "id": "http://inessential.com/2019/02/13/jonathan_t_explains_www_jonathant_com_20",
      "url": "http://inessential.com/2019/02/13/jonathan_t_explains_www_jonathant_com_20",
      "content_html": "<p>Jonathan T explains <a href=\"https://www.jonathant.com/2019/02/13/how-to-activate-apple-id-2fa-when-you-have-two-accounts/\">how to activate Apple ID 2fa when you have two accounts</a>.</p>\n\n<p>Short version: temp user on your Mac, SMS as backup, delete temp user, SMS keeps working.</p>\n"
    },
    {
      "title": "Two-Factor Authentication and Developer Accounts",
      "date_published": "2019-02-13T14:45:38-08:00",
      "id": "http://inessential.com/2019/02/13/two_factor_authentication_and_developer_",
      "url": "http://inessential.com/2019/02/13/two_factor_authentication_and_developer_",
      "content_html": "<p>I just got an email from Apple that two-factor authentication will be required for my Apple Developer account.</p>\n\n<p>I have <em>two</em> accounts — one for personal use, one for development use — and so do lots of developers.</p>\n\n<p>I don’t know how to make this work. None of my devices are ever signed in to my developer account. That account exists purely for building and distributing apps.</p>\n"
    },
    {
      "date_published": "2019-02-13T11:21:05-08:00",
      "id": "http://inessential.com/2019/02/13/brett_terpstra_writes_about_brettterpstr",
      "url": "http://inessential.com/2019/02/13/brett_terpstra_writes_about_brettterpstr",
      "content_html": "<p>Brett Terpstra writes about <a href=\"http://brettterpstra.com/2019/02/13/on-blogging-ethics-and-thin-skin/\">blogging, ethics, and thin skin</a>.</p>\n\n<p>I’ve been reading Brett’s blog for years — I trust him, and he’s a good writer. I also use his app <a href=\"http://marked2app.com/\">Marked</a> pretty much every day.</p>\n"
    },
    {
      "date_published": "2019-02-13T10:28:45-08:00",
      "id": "http://inessential.com/2019/02/13/daniel_jalkut_has_bad_news_for_blogger_u",
      "url": "http://inessential.com/2019/02/13/daniel_jalkut_has_bad_news_for_blogger_u",
      "content_html": "<p>Daniel Jalkut has <a href=\"https://red-sweater.com/blog/3431/the-future-of-blogger-and-marsedit\">bad news for Blogger users</a> — Google is shutting down an images API.</p>\n\n<p><a href=\"http://cdevroe.com/2019/02/13/kafka-verizon/\">Colin Devroe reminds us</a> not to rely on mega-corporations keeping our beloved services alive. They won’t.</p>\n"
    },
    {
      "date_published": "2019-02-12T14:14:57-08:00",
      "id": "http://inessential.com/2019/02/12/theres_still_snow_everywhere_but_the_sun",
      "url": "http://inessential.com/2019/02/12/theres_still_snow_everywhere_but_the_sun",
      "content_html": "<p>There’s still snow everywhere — but the sun just came out, and I heard some birdsong, and I looked outside and saw a couple robins.</p>\n"
    },
    {
      "date_published": "2019-02-11T10:07:55-08:00",
      "id": "http://inessential.com/2019/02/11/cliff_mass_seattles_favorite_weather_blo",
      "url": "http://inessential.com/2019/02/11/cliff_mass_seattles_favorite_weather_blo",
      "content_html": "<p>Cliff Mass, Seattle’s favorite weather blogger, writes that <a href=\"https://cliffmass.blogspot.com/2019/02/the-end-in-sight-for-lowlands-as-warm.html\">the end of all this snow mess is in sight</a>.</p>\n"
    },
    {
      "date_published": "2019-02-08T10:39:12-08:00",
      "id": "http://inessential.com/2019/02/08/cheri_baker_writes_about_spotify_in_soci",
      "url": "http://inessential.com/2019/02/08/cheri_baker_writes_about_spotify_in_soci",
      "content_html": "<p>Cheri Baker writes about Spotify in <a href=\"https://social.cheribaker.com/2019/02/08/dear-podcasters.html\">Dear Podcasters…</a>:</p>\n\n<blockquote>\n  <p>I fear we’ve seen this scenario before. A biggish company decides that they’ll aggregate an immense amount of creative work and monetize it. They’ll offer you tools to make “sharing” easy, and at first the terms of service will be reasonable. But once they’ve eaten a big enough chunk of content, they’ll lock the gates tighter, change the terms of service, and monetize the audience. By that point, customers would feel locked into Spotify, and podcasters would be afraid to leave.</p>\n</blockquote>\n"
    },
    {
      "title": "NetNewsWire Roadmap 2019",
      "date_published": "2019-02-06T18:05:46-08:00",
      "id": "http://inessential.com/2019/02/06/netnewswire_roadmap_2019",
      "url": "http://inessential.com/2019/02/06/netnewswire_roadmap_2019",
      "content_html": "<p>Let’s look back at last year first.</p>\n\n<h4 id=\"evergreen-to-netnewswire\">2018: Evergreen to NetNewsWire</h4>\n\n<p>As 2018 started, the app was called Evergreen, which I still think is a pretty great name for an RSS reader. I’d been working on it for about four years, on weekends and at nights.</p>\n\n<p>It was usable-by-me a year ago, and a few other people were using it, even though it was missing all kinds of important features.</p>\n\n<p>And then, some time in the spring of 2018, I thought to contact the folks at <a href=\"https://blackpixel.com/\">Black Pixel</a> about getting NetNewsWire back. Seemed like a total longshot. But why not try?</p>\n\n<p>And they surprised me by being interested! In fact, they mentioned that they’d already been talking about it.</p>\n\n<p>I was clear that I wanted just the name — not the code, not the then-current users, not the sync service. The app named Evergreen would be renamed as NetNewsWire, but would be, in every other way, the same app I was going to write. It would still be free and open source.</p>\n\n<p>They agreed. And then, of course, discussions, mostly internal to Black Pixel, happened for a few months, because that’s how these things go — and we managed to make it official on August 31, 2018. (See <a href=\"http://inessential.com/2018/08/31/netnewswire_comes_home\">NetNewsWire Comes Home</a>.) Black Pixel gave it to me for free (we never haggled over price; that was their plan all along), and their generosity remains one of the things I’m most thankful for in my entire career.</p>\n\n<p>Soon after that I renamed Evergreen to NetNewsWire — and memorialized the name Evergreen in the app’s bundle id: <code>com.ranchero.NetNewsWire-Evergreen</code>. (NetNewsWire will always be Evergreen.)</p>\n\n<p>And so it turned out that I had been working on NetNewsWire 5.0 for four years already! I just didn’t know it for most of that time. :)</p>\n\n<p>The rest of the year saw more work on the app, with code contributions from <a href=\"https://github.com/vincode-io\">Maurice Parker</a>, <a href=\"https://github.com/olofhellman\">Olof Hellman</a>, and <a href=\"https://github.com/danielpunkass\">Daniel Jalkut</a>, with bug reports on GitHub, with the help of the folks on the NetNewsWire Slack group. (Which you can join too: just email me.)</p>\n\n<p>That was 2018.</p>\n\n<h4 id=\"lets-ship-this-thing\">2019: Let’s Ship This Thing</h4>\n\n<p>At this writing we’re down to <a href=\"https://github.com/brentsimmons/NetNewsWire/milestone/1\">seven bugs in the 5.0 Alpha milestone</a>. There are three main things: syncing with Feedbin, searching, and the app icon.</p>\n\n<p>I want to ship 5.0 by WWDC, which is (most likely) the first full week of June. So here’s what I’m planning:</p>\n\n<ul>\n  <li>Finish those last bugs, and ship 5.0a1.</li>\n  <li>During the alpha period: write the Help book and document at least some of the code. <em>Test</em>, most importantly. Fix any bugs that get reported. Once there are no known defects, after a suitable period of testing, then ship 5.0b1.</li>\n  <li>During the beta period, continue testing. The code will be touched only with great reluctance. (Every beta is a shipping candidate.) Continue documenting the code.</li>\n  <li>Once there are no known defects, ship 5.0.</li>\n</ul>\n\n<p>As you can see, the 5.0 Alpha milestone represents five years of work, and the alpha and beta periods ought to be relatively short, possibly just a couple weeks each.</p>\n\n<p>But how quickly we get to alpha is mainly a function of how quickly I can get Feedbin syncing working and bug-free.</p>\n\n<p>I <em>think</em> I can get it done by WWDC, but I could be wrong! No promises, of course. For NetNewsWire, app quality is everything, and hitting a date means very little.</p>\n\n<h4 id=\"beyond-50-more-sync\">Beyond 5.0: More Sync</h4>\n\n<p>There’s every chance that WWDC will bring changes and new technology from Apple that I’ll have to deal with. That’s expected — every app developer (hopefully) budgets for this. Assuming 5.0 is out before WWDC, then I can deal with this stuff in an update in the summer, in time for the next macOS.</p>\n\n<p>There’s a huge list of features I could work on after that — there’s so much room for growth — but I think the big one has to be adding support for more syncing systems. I’m likely to do Feedly next, since it appears to the the most popular.</p>\n\n<p>So my hope is to get Feedly support shipping by the end of 2019. And, if I do, then it will have been a very good year.</p>\n"
    },
    {
      "date_published": "2019-02-06T11:21:10-08:00",
      "id": "http://inessential.com/2019/02/06/national_weather_service_seattle_lets_us",
      "url": "http://inessential.com/2019/02/06/national_weather_service_seattle_lets_us",
      "content_html": "<p>National Weather Service Seattle lets us know <a href=\"https://twitter.com/NWSSeattle/status/1093139143759155201\">what’s coming up</a>. More snow!</p>\n\n<p>Thursday is the Last Dry Day.</p>\n"
    },
    {
      "date_published": "2019-02-06T10:58:24-08:00",
      "id": "http://inessential.com/2019/02/06/_michael_zornek_writes_http_microblog_mi",
      "url": "http://inessential.com/2019/02/06/_michael_zornek_writes_http_microblog_mi",
      "content_html": "<p><a href=\"http://microblog.mikezornek.com/2019/02/06/it-is-not.html\">Michael Zornek writes</a> (and this is the entirety of his post):</p>\n\n<blockquote>\n  <p>It is not a podcast unless there is a RSS feed.</p>\n</blockquote>\n"
    },
    {
      "title": "Roadmaps",
      "date_published": "2019-02-05T13:54:11-08:00",
      "id": "http://inessential.com/2019/02/05/roadmaps",
      "url": "http://inessential.com/2019/02/05/roadmaps",
      "content_html": "<p>I love it when companies or products publish a roadmap. Omni publishes one every year — <a href=\"https://www.omnigroup.com/blog/omni-roadmap-2019\">here’s the latest</a>.</p>\n\n<p>Today I ran across the <a href=\"http://blog.cocoacake.net/archives/1205\">Fiery Feeds Roadmap 2019</a>. I’ve heard of Fiery Feeds, but I haven’t checked it out yet. Now I will, because the developer Lukas Burgstaller is a blogger and I enjoyed reading the roadmap.</p>\n\n<p>Now, of course, I have to consider writing a NetNewsWire roadmap for 2019. The big thing on the list would be shipping 5.0. (I’ve been working on the app for five years! Time to ship.)</p>\n"
    },
    {
      "date_published": "2019-01-31T15:45:16-08:00",
      "id": "http://inessential.com/2019/01/31/there_should_be_a_roger_stone_emoji_",
      "url": "http://inessential.com/2019/01/31/there_should_be_a_roger_stone_emoji_",
      "content_html": "<p>There should be a Roger Stone emoji.</p>\n"
    },
    {
      "date_published": "2019-01-31T15:34:15-08:00",
      "id": "http://inessential.com/2019/01/31/_seattle_xcoders_special_fifth_thursday_",
      "url": "http://inessential.com/2019/01/31/_seattle_xcoders_special_fifth_thursday_",
      "content_html": "<p><a href=\"https://xcoders.org/2019/01/29/seattle-xcoders-unofficial.html\">Seattle Xcoders special fifth Thursday unofficial meeting</a> is tonight at 6:30 pm at the Waterwheel in Ballard.</p>\n\n<p>Note: not Cyclops. Waterwheel.</p>\n\n<p>And it’s not really a meeting. We just hang out. Join us!</p>\n"
    },
    {
      "date_published": "2019-01-30T10:40:55-08:00",
      "id": "http://inessential.com/2019/01/30/craig_hockenberry_wrote_up_a_simple_webk",
      "url": "http://inessential.com/2019/01/30/craig_hockenberry_wrote_up_a_simple_webk",
      "content_html": "<p>Craig Hockenberry wrote up a simple WebKit feature request: <a href=\"https://bugs.webkit.org/show_bug.cgi?id=194028\">Add limits to the amount of JavaScript that can be loaded by a website</a>.</p>\n"
    },
    {
      "title": "TigerLaunch",
      "date_published": "2019-01-28T10:36:46-08:00",
      "id": "http://inessential.com/2019/01/28/tigerlaunch",
      "url": "http://inessential.com/2019/01/28/tigerlaunch",
      "content_html": "<p>In 2002 I wrote TigerLaunch, a little app-launcher app, and released it for free.</p>\n\n<p style=\"text-align:center\"><img src=\"http://ranchero.com/images/tigerlaunchicon3.jpg\" alt=\"TigerLaunch app icon\" width=\"130\" height=\"132\" /></p>\n\n<p>In 2019 it still runs — and has <a href=\"https://www.macupdate.com/app/mac/9152/tigerlaunch/reviews\">4.5 stars on MacUpdate</a> and a number of comments over the years.</p>\n\n<p>I’d pretty much forgotten about it, until recently when I started getting email from people asking me to make it 64-bit so it will continue to run on future OSes.</p>\n\n<p style=\"text-align:center\">* * *</p>\n\n<p>The idea behind TigerLaunch was to make the simplest app-launcher I could make. It adds a menu to your menubar. The menu is a list of apps on your machine, sorted alphabetically. There was a settings screen where you could exclude apps that you never launch.</p>\n\n<p>Here’s the <a href=\"https://web.archive.org/web/20050602005658/ranchero.com/tigerlaunch/\">oldest version of the TigerLaunch page</a> that archive.org has.</p>\n\n<p style=\"text-align:center\">* * *</p>\n\n<p>I’m considering doing an update. It doesn’t have many users — but the app is 17 years old and it’s still in use. Seems like it would be a shame if it stopped.</p>\n\n<p>It’s such a simple app. I’d just rewrite it from scratch in Swift, probably. Make it open source. The hard part is that it would need a new app icon.</p>\n\n<p><i>Update a couple days later, because people keep asking:</i> It would need a new app icon because Mac apps these days need larger sizes for app icons than was required in 2002, and I don’t have larger sizes of the icon.</p>\n"
    },
    {
      "date_published": "2019-01-27T15:12:35-08:00",
      "id": "http://inessential.com/2019/01/27/the_best_book_ive_ever_read_on_programmi",
      "url": "http://inessential.com/2019/01/27/the_best_book_ive_ever_read_on_programmi",
      "content_html": "<p>The best book I’ve ever read on programming and making apps is <a href=\"https://smile.amazon.com/Memos-Next-Millennium-Italo-Calvino/dp/0544146670/\">Six Memos for the Next Millennium</a> by Italo Calvino.</p>\n\n<p>It’s about literature, not programming. But it applies, and I highly recommend it to people who make apps.</p>\n"
    },
    {
      "date_published": "2019-01-27T12:35:35-08:00",
      "id": "http://inessential.com/2019/01/27/in_2015_i_wrote_a_series_of_articles_on_",
      "url": "http://inessential.com/2019/01/27/in_2015_i_wrote_a_series_of_articles_on_",
      "content_html": "<p>In 2015 I wrote a series of articles on <a href=\"http://inessential.com/hownottocrash\">How Not To Crash</a>. My favorite part is at the end of <a href=\"http://inessential.com/2015/06/10/how_not_to_crash_9_mindset\">the last article</a>, the “Cape, mask” section.</p>\n\n<p>It begins:</p>\n\n<blockquote>\n  <p>When I was younger I wanted to be a code magician — or, really, a hero. But I learned that <em>actual software quality is more important than what I imagine other people think of me</em>.</p>\n\n  <p>And, more: quality is a reward that’s almost spiritual. It’s an act of devotion, both selfish and unselfish, to something more important than ego.</p>\n</blockquote>\n"
    },
    {
      "date_published": "2019-01-27T11:59:58-08:00",
      "id": "http://inessential.com/2019/01/27/the_latest_version_of_netnewswire_includ",
      "url": "http://inessential.com/2019/01/27/the_latest_version_of_netnewswire_includ",
      "content_html": "<p>The latest version of NetNewsWire includes a crash log reporter. On each launch, it looks for the latest crash log. If it finds one, and it hasn’t been sent in yet, it prompts the user to send it in.</p>\n\n<p>(The user may choose not to. The user may also choose just to send crash logs automatically in the future.)</p>\n\n<p>At the moment, NetNewsWire has no known crashing bugs. This may change as people update!</p>\n\n<p>I might start getting crash logs. And I might not. Either way is interesting.</p>\n\n<p>PS At the moment I have <a href=\"https://github.com/brentsimmons/NetNewsWire/milestone/1\">12 bugs to go before 5.0a1 ships</a>.</p>\n"
    },
    {
      "date_published": "2019-01-27T11:39:40-08:00",
      "id": "http://inessential.com/2019/01/27/_netnewswire_5_0d8_has_been_released_htt",
      "url": "http://inessential.com/2019/01/27/_netnewswire_5_0d8_has_been_released_htt",
      "content_html": "<p><a href=\"https://nnw.ranchero.com/2019/01/27/netnewswire-d.html\">NetNewsWire 5.0d8 has been released</a>. Check for updates!</p>\n"
    }
  ]
}
